@page "/cart"
@inject ICartService _cartService
@inject IOrderService _orderService

<PageTitle>Корзина</PageTitle>

<h3>Корзина</h3>

@if (_cartProducts is null || _cartProducts.Count == 0)
{
    <span>@_message</span>
}
else
{
    <div>
        @foreach (var product in _cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">
                            @product.Title
                        </a>
                    </h5>
                    <span>@product.ProductType</span>
                    <br />
                    <input type="number" value="@product.Quantity" min="1" class="form-control input-quantity"
                           @onchange="@(e => UpdateQuantityAsync(e, product))" />
                    <button class="btn-delete"
                            @onclick="@(() => RemoveProductFromCartAsync(product.ProductId, product.ProductTypeId))">
                        Удалить из корзины
                    </button>
                </div>
                <div class="cart-product-price">
                    @(product.Price * product.Quantity)₽
                </div>
            </div>
        }
        <div class="cart-product-price">
            Итого (@_cartProducts.Count): @_cartProducts.Sum(x => x.Price * x.Quantity)₽
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Заказать</button>
}

@code {
    List<CartProductResponse> _cartProducts;
    string _message = "Загрузка корзины...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCartAsync();
    }

    private async Task RemoveProductFromCartAsync(int productId, int productTypeId)
    {
        await _cartService.RemoveProductsFromCartAsync(productId, productTypeId);
        await LoadCartAsync();
    }

    private async Task LoadCartAsync()
    {
        await _cartService.GetCartItemsCountAsync();
        _cartProducts = await _cartService.GetCartProductsAsync();
        
        if (_cartProducts is null || _cartProducts.Count == 0)
            _message = "Ваша корзина пуста.";
    }

    private async Task UpdateQuantityAsync(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());

        if (product.Quantity < 1)
            product.Quantity = 1;
        
        await _cartService.UpdateQuantityAsync(product);
    }

    private async Task PlaceOrder()
    {
        await _orderService.PlaceOrderAsync();
    }
}
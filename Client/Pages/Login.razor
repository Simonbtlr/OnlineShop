@page "/login"
@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>Авторизация</PageTitle>

<h3>Авторизация</h3>

<EditForm Model="_user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_user.Email" class="form-control"/>
        <ValidationMessage For="@(() => _user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Пароль</label>
        <InputText id="password" @bind-Value="_user.Password" class="form-control" type="password"/>
        <ValidationMessage For="@(() => _user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Войти</button>
</EditForm>
<div class="text-danger">
    <span>@_errorMessage</span>
</div>

@code {
    private readonly UserLogin _user = new();
    
    private string _errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var result = await _authService.LoginAsync(_user);

        if (result.Success)
        {
            _errorMessage = string.Empty;
            await _localStorage.SetItemAsync("authToken", result.Data);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo("");
        }
        else
            _errorMessage = result.Message;
    }
}
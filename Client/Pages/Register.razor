@page "/register"
@inject IAuthService _authService

<PageTitle>Регистрация</PageTitle>

<h3>Регистрация</h3>

<EditForm Model="_user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_user.Email" class="form-control"/>
        <ValidationMessage For="@(() => _user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Пароль</label>
        <InputText id="password" @bind-Value="_user.Password" class="form-control" type="password"/>
        <ValidationMessage For="@(() => _user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Повторите пароль</label>
        <InputText id="confirmPassword" @bind-Value="_user.ConfirmPassword" class="form-control" type="password"/>
        <ValidationMessage For="@(() => _user.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Зарегистирироваться</button>
    <div class="@_messageCssClass">
        <span>@_message</span>
    </div>
</EditForm>

@code {
    private readonly UserRegister _user = new();

    private string _message = string.Empty;
    private string _messageCssClass = string.Empty;
    
    private async Task HandleRegistration()
    {
        var result = await _authService.RegisterAsync(_user);
        _message = result.Message;

        _messageCssClass = result.Success ? "text-success" : "text-danger";
    }
}